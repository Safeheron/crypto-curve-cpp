// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: curve_point.proto

#include "curve_point.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
PROTOBUF_CONSTEXPR CurvePoint::CurvePoint(
    ::_pbi::ConstantInitialized)
  : x_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , y_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , curve_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CurvePointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurvePointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurvePointDefaultTypeInternal() {}
  union {
    CurvePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurvePointDefaultTypeInternal _CurvePoint_default_instance_;
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_curve_5fpoint_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_curve_5fpoint_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_curve_5fpoint_2eproto = nullptr;

const uint32_t TableStruct_curve_5fpoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::CurvePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::CurvePoint, x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::CurvePoint, y_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::CurvePoint, curve_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::CurvePoint)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::_CurvePoint_default_instance_._instance,
};

const char descriptor_table_protodef_curve_5fpoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021curve_point.proto\022\017safeheron.proto\"1\n\n"
  "CurvePoint\022\t\n\001x\030\001 \001(\t\022\t\n\001y\030\002 \001(\t\022\r\n\005curv"
  "e\030\003 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_curve_5fpoint_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_curve_5fpoint_2eproto = {
    false, false, 95, descriptor_table_protodef_curve_5fpoint_2eproto,
    "curve_point.proto",
    &descriptor_table_curve_5fpoint_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_curve_5fpoint_2eproto::offsets,
    file_level_metadata_curve_5fpoint_2eproto, file_level_enum_descriptors_curve_5fpoint_2eproto,
    file_level_service_descriptors_curve_5fpoint_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_curve_5fpoint_2eproto_getter() {
  return &descriptor_table_curve_5fpoint_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_curve_5fpoint_2eproto(&descriptor_table_curve_5fpoint_2eproto);
namespace safeheron {
namespace proto {

// ===================================================================

class CurvePoint::_Internal {
 public:
};

CurvePoint::CurvePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.CurvePoint)
}
CurvePoint::CurvePoint(const CurvePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x().empty()) {
    x_.Set(from._internal_x(), 
      GetArenaForAllocation());
  }
  y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_y().empty()) {
    y_.Set(from._internal_y(), 
      GetArenaForAllocation());
  }
  curve_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    curve_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_curve().empty()) {
    curve_.Set(from._internal_curve(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.CurvePoint)
}

inline void CurvePoint::SharedCtor() {
x_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
y_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  y_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
curve_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  curve_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CurvePoint::~CurvePoint() {
  // @@protoc_insertion_point(destructor:safeheron.proto.CurvePoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurvePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  x_.Destroy();
  y_.Destroy();
  curve_.Destroy();
}

void CurvePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurvePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.CurvePoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.ClearToEmpty();
  y_.ClearToEmpty();
  curve_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurvePoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_x();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.CurvePoint.x"));
        } else
          goto handle_unusual;
        continue;
      // string y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_y();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.CurvePoint.y"));
        } else
          goto handle_unusual;
        continue;
      // string curve = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_curve();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.CurvePoint.curve"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurvePoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.CurvePoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string x = 1;
  if (!this->_internal_x().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x().data(), static_cast<int>(this->_internal_x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.CurvePoint.x");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_x(), target);
  }

  // string y = 2;
  if (!this->_internal_y().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_y().data(), static_cast<int>(this->_internal_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.CurvePoint.y");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_y(), target);
  }

  // string curve = 3;
  if (!this->_internal_curve().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_curve().data(), static_cast<int>(this->_internal_curve().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.CurvePoint.curve");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_curve(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.CurvePoint)
  return target;
}

size_t CurvePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.CurvePoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string x = 1;
  if (!this->_internal_x().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x());
  }

  // string y = 2;
  if (!this->_internal_y().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_y());
  }

  // string curve = 3;
  if (!this->_internal_curve().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_curve());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurvePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurvePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurvePoint::GetClassData() const { return &_class_data_; }

void CurvePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurvePoint *>(to)->MergeFrom(
      static_cast<const CurvePoint &>(from));
}


void CurvePoint::MergeFrom(const CurvePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.CurvePoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_x().empty()) {
    _internal_set_x(from._internal_x());
  }
  if (!from._internal_y().empty()) {
    _internal_set_y(from._internal_y());
  }
  if (!from._internal_curve().empty()) {
    _internal_set_curve(from._internal_curve());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurvePoint::CopyFrom(const CurvePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.CurvePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurvePoint::IsInitialized() const {
  return true;
}

void CurvePoint::InternalSwap(CurvePoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_, lhs_arena,
      &other->x_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &y_, lhs_arena,
      &other->y_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &curve_, lhs_arena,
      &other->curve_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CurvePoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_curve_5fpoint_2eproto_getter, &descriptor_table_curve_5fpoint_2eproto_once,
      file_level_metadata_curve_5fpoint_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::CurvePoint*
Arena::CreateMaybeMessage< ::safeheron::proto::CurvePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::CurvePoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
